name: Build MTG

env:
  GAPPSV: 'vic'
  GAPPSU: 'upsilon'
  REPO: 'vendor_gapps'

on:
  workflow_dispatch:
  push :

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Fetch MTG from gitlab
      run: |
        git clone https://gitlab.com/MindTheGapps/"${{ env.REPO }}" --depth=1 -b "${{ env.GAPPSU }}" "${{ env.REPO }}_${{ env.GAPPSU }}"
        git clone https://gitlab.com/MindTheGapps/"${{ env.REPO }}" --depth=1 -b "${{ env.GAPPSV }}" "${{ env.REPO }}_${{ env.GAPPSV }}"

    - name: Clean up source
      run: |
        echo "Clean up stuffs"
        APK_PATHS=(
        "arm64/proprietary/product/priv-app/VelvetTitan/VelvetTitan.apk"
        "arm64/proprietary/product/priv-app/Velvet/Velvet.apk"
        "arm64/proprietary/product/app/SpeechServicesByGoogle/SpeechServicesByGoogle.apk"
        "arm64/proprietary/product/app/talkback/talkback.apk"
        "common/proprietary/system_ext/priv-app/GoogleFeedback/GoogleFeedback.apk"
        "common/proprietary/product/priv-app/Wellbeing/Wellbeing.apk"
        "common/proprietary/product/priv-app/GooglePartnerSetup/GooglePartnerSetup.apk"
        )

        for APK_PATH in "${APK_PATHS[@]}"; do
        rm -f "${{ env.REPO }}_${{ env.GAPPSU }}"/$APK_PATH
        rm -f "${{ env.REPO }}_${{ env.GAPPSV }}"/$APK_PATH
        done

        echo "current_date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
        echo "CURRENT_PACKAGE_V=$(cat /home/runner/work/AutoMTG/AutoMTG/vic.txt)" >> $GITHUB_ENV
        echo "CURRENT_PACKAGE_U=$(cat /home/runner/work/AutoMTG/AutoMTG/udc.txt)" >> $GITHUB_ENV
        ls -la

    - name: Build Mind The Gapps
      run: |
        echo "Initiate Builds"

        GREEN='\033[0;32m'
        YELLOW='\033[0;33m'
        RESET='\033[0m'

        PGREEN() {
          echo -e "${GREEN}$@${RESET}"
        }
        PYELL() {
          echo -e "${YELLOW}$@${RESET}"
        }          

        PYELL Building for UpsideDownCake
        cd "${{ env.REPO }}_${{ env.GAPPSU }}"
        COMMIT_U="branch: $(git rev-parse --abbrev-ref HEAD), commit: $(git log -1 --format='%s(%h)')"
        echo "COMMIT_U=${COMMIT_U}" >> $GITHUB_ENV

        if [[ "${CURRENT_PACKAGE_U}" != "$COMMIT_U"  ]]; then 
            make gapps_arm64
        else
            PYELL Packages already up to date
        fi

        cd -
        PYELL Building for VanillaIceCream
        cd "${{ env.REPO }}_${{ env.GAPPSV }}"
        COMMIT_V="branch: $(git rev-parse --abbrev-ref HEAD), commit: $(git log -1 --format='%s(%h)')"
        echo "COMMIT_V=${COMMIT_V}" >> $GITHUB_ENV

        if [[ "${CURRENT_PACKAGE_V}" != "$COMMIT_V"  ]]; then 
            make gapps_arm64
        else
            PYELL Packages already up to date
        fi

        cd -

    - name: push logs 
      run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          if [[ "${CURRENT_PACKAGE_U}" != "$COMMIT_U"  ]]; then 
             echo "$COMMIT_U" | tee udc.txt 
             git add udc.txt
          else 
             PYELL udc package is already up to date 
          fi
              
          if [[ "${CURRENT_PACKAGE_V}" != "$COMMIT_V"  ]]; then 
             echo "$COMMIT_V" | tee vic.txt 
             git add vic.txt
          else 
             PYELL udc package is already up to date 
          fi

          echo "$COMMIT_V" | tee vic.txt 
          git commit -m "update changelogs text"
          git push
